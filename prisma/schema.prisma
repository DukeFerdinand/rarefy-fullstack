// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

model User {
  id       String   @id @default(uuid())
  username String   @unique
  email    String   @unique
  password String
  joined   DateTime @default(now())
  role     Role[]   @default([User])

  SavedSearch  SavedSearch[]
  Notification Notification[]
}

model InviteCode {
  id   String  @id @default(uuid())
  code String  @unique @default(cuid())
  used Boolean @default(false)
}

model SavedSearch {
  id        String   @id @default(uuid())
  name      String
  query     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vinylOnly Boolean  @default(true)

  user         User           @relation(fields: [userId], references: [id])
  userId       String
  SearchResult SearchResult[]
  Notification Notification[]
}

model SearchResult {
  id String @id @default(uuid())

  // Metadata
  title    String
  images   String[] // Ideally S3 IDs
  url      String   @unique
  notified Boolean  @default(false)

  // Price and bids
  startingPrice String
  currentPrice  String
  buyoutPrice   String?
  endPrice      String?
  bids          Int     @default(0)

  // Important times
  startDate DateTime
  endDate   DateTime
  foundAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  search       SavedSearch    @relation(fields: [searchId], references: [id])
  searchId     String
  Notification Notification[]
}

enum NotificationType {
  NewListing
}

// NOTIFICATIONS
model Notification {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  type      NotificationType
  read      Boolean          @default(false)
  shortLink String?          @unique // For text notifications, to be shorter

  user        User        @relation(fields: [userId], references: [id])
  userId      String
  savedSearch SavedSearch @relation(fields: [searchId], references: [id])
  searchId    String

  // this will be useful for displaying the notification in the future
  searchResults SearchResult[]
}

// ACCESS TOKENS
model MachineUser {
  id           String                  @id @default(uuid())
  commonName   String
  created      DateTime                @default(now())
  allowedIps   String[]
  AccessTokens AccessToken[]
  permissions  MachineUserPermission[]
}

model AccessToken {
  id          String       @id @default(uuid())
  token       String       @unique @default(cuid())
  created     DateTime     @default(now())
  expires     DateTime?
  revoked     Boolean      @default(false)
  revokedAt   DateTime?
  permissions Permission[] @default([READ, WRITE])

  machineUser   MachineUser @relation(fields: [machineUserId], references: [id])
  machineUserId String
}

model MachineUserPermission {
  id         String     @id @default(uuid())
  permission Permission

  machineUser MachineUser[]
}

enum Permission {
  READ
  WRITE
}
